// Generated by CoffeeScript 1.11.1
var Game, autolevel, g, ids, keyPressed, mousePressed, setup, touchStarted, xdraw;

g = 0;

ids = {};

Game = (function() {
  function Game(x1, y1, a1, s, stack) {
    var h, w;
    this.x = x1 != null ? x1 : 0;
    this.y = y1 != null ? y1 : 0;
    this.a = a1 != null ? a1 : 0;
    this.s = s != null ? s : 1;
    this.stack = stack != null ? stack : [];
    this.players = [];
    this.level = 1;
    w = width;
    h = height;
    this.mode = 0;
    this.bitmap = true;
    this.players.push(new Player([87, 65, 83, 68, 16], 30, 30, 60, 60));
    this.players.push(new Player([38, 37, 40, 39, 17], 90, 30, 60, 60));
    this.display = new Button(1, 1, 1, this, 0.2, 0, -24, 6, 12, "", "");
  }

  Game.prototype.push = function() {
    this.stack.push([this.x, this.y, this.a, this.s]);
    return push();
  };

  Game.prototype.pop = function() {
    var ref;
    ref = this.stack.pop(), this.x = ref[0], this.y = ref[1], this.a = ref[2], this.s = ref[3];
    return pop();
  };

  Game.prototype.rotate = function(d) {
    rotate(radians(d));
    return this.a += d;
  };

  Game.prototype.scale = function(ds) {
    scale(ds);
    return this.s *= ds;
  };

  Game.prototype.translate = function(dx, dy) {
    var v;
    v = radians(this.a);
    this.x += this.s * dx * cos(v) - this.s * dy * sin(v);
    this.y += this.s * dy * cos(v) + this.s * dx * sin(v);
    return translate(dx, dy);
  };

  Game.prototype.dump = function(txt) {
    return print(txt, this.x, this.y);
  };

  Game.prototype.process = function() {
    this.mode = 1 - this.mode;
    if (this.mode === 0) {
      autolevel();
      return this.createProblem();
    }
  };

  Game.prototype.result = function() {
    var k, len, player, ref;
    fill(127);
    rect(0, 0, width, height);
    if (this.players[0].stopp === 0) {
      this.players[0].color = color(127);
    } else if (this.players[0].score() < this.players[1].score() || this.players[1].stopp === 0) {
      this.players[0].color = color(0, 255, 0);
    } else {
      this.players[0].color = color(255, 0, 0);
    }
    if (this.players[1].stopp === 0) {
      this.players[1].color = color(127);
    } else if (this.players[1].score() < this.players[0].score() || this.players[0].stopp === 0) {
      this.players[1].color = color(0, 255, 0);
    } else {
      this.players[1].color = color(255, 0, 0);
    }
    ref = this.players;
    for (k = 0, len = ref.length; k < len; k++) {
      player = ref[k];
      player.result();
    }
    return this.solve_result();
  };

  Game.prototype.solve_result = function() {
    var H, i, k, len, n, number, ref, results, x, y;
    fill(0);
    n = 20;
    H = height / n;
    textSize(H);
    ref = this.solution;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      number = ref[i];
      x = int(i / n);
      y = int(i % n);
      results.push(text(number.toString(), x * 100, -8.5 * H + y * H));
    }
    return results;
  };

  Game.prototype.createProblem = function() {
    var a, b, c1, c2, c3, d, item, j, k, l, len, len1, len2, lst, lst2, m, ms, player, ref, ref1, results, save, tree, x, y;
    x = int(random(-5, 6));
    y = int(random(-5, 6));
    a = new Complex(x, y);
    lst = [a];
    tree = {};
    tree[a.toString()] = null;
    lst2 = [];
    c1 = new Complex(0, 1);
    c2 = new Complex(2, 0);
    c3 = new Complex(1, 0);
    save = function(item1, item2) {
      if (!(item2 in tree)) {
        lst2.push(item2);
        return tree[item2] = item1;
      }
    };
    ref = range(this.level);
    for (k = 0, len = ref.length; k < len; k++) {
      j = ref[k];
      lst2 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        save(item, item.mul(c1));
        save(item, item.mul(c2));
        save(item, item.add(c3));
        save(item, item.mir());
      }
      lst = lst2;
    }
    b = this.selectTarget(lst);
    this.solution = this.path(b, tree);
    print(this.solution.join(' '));
    d = new Date();
    ms = int(d.getTime());
    ref1 = this.players;
    results = [];
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      player = ref1[m];
      player.history = [a];
      player.target = b;
      player.count = 0;
      player.start = ms;
      player.stopp = 0;
      results.push(player.level = this.level);
    }
    return results;
  };

  Game.prototype.path = function(b, tree) {
    if (b === null) {
      return [];
    }
    return this.path(tree[b], tree).concat([b]);
  };

  Game.prototype.selectTarget = function(lst) {
    var bs, item;
    bs = (function() {
      var k, len, ref, ref1, results;
      results = [];
      for (k = 0, len = lst.length; k < len; k++) {
        item = lst[k];
        if ((-10 < (ref = item.x) && ref <= 10) && (-10 < (ref1 = item.y) && ref1 <= 10)) {
          results.push(item);
        }
      }
      return results;
    })();
    if (bs.length > 0) {
      return _.sample(bs);
    }
    return _.min(lst, function(item) {
      return dist(0, 0, item.x, item.y);
    });
  };

  return Game;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  frameRate(15);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  g = new Game();
  g.createProblem();
  return xdraw();
};

xdraw = function() {
  var i, k, len, player, ref;
  bg(0.5);
  g.push();
  g.translate(int(width / 2), int(height / 2));
  ref = g.players;
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    player = ref[i];
    g.push();
    g.translate((2 * i - 1) * width / 4, 0);
    if (g.mode === 0) {
      player.draw();
    } else {
      player.result();
    }
    g.pop();
  }
  g.display.draw();
  return g.pop();
};

touchStarted = function() {
  var k, l, len, len1, player, ref, touch;
  for (k = 0, len = touches.length; k < len; k++) {
    touch = touches[k];
    if (!(touch.id in ids)) {
      ids[touch.id] = touch;
      ref = g.players;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        player = ref[l];
        player.touchStarted(touch.x, touch.y);
      }
    }
  }
  if (touch.length === 0) {
    ids = {};
  }
  g.display.touchStarted(touch.x, touch.y);
  return xdraw();
};

mousePressed = function() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.mousePressed();
  }
  g.display.mousePressed();
  return xdraw();
};

keyPressed = function() {
  var k, len, player, ref;
  if (key === ' ') {
    g.display.keyPressed(key);
  } else if (key === 'B') {
    g.bitmap = !g.bitmap;
  } else {
    ref = g.players;
    for (k = 0, len = ref.length; k < len; k++) {
      player = ref[k];
      player.keyPressed(key);
    }
  }
  return xdraw();
};

autolevel = function() {
  var finished, k, len, perfect, player, ref;
  finished = 0;
  perfect = 0;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    if (player.finished()) {
      finished++;
    }
    if (player.perfect(g.level)) {
      perfect++;
    }
  }
  if (perfect > 0) {
    g.level++;
  } else {
    g.level--;
  }
  if (g.level === 0) {
    return g.level = 1;
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Complex\www\sketch.coffee