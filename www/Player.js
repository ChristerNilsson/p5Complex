// Generated by CoffeeScript 1.11.1
var Player;

Player = (function() {
  var digits;

  function Player(keys, x, y, w, h) {
    this.w = w;
    this.h = h;
    this.M = 120;
    this.N = 60;
    this.keys = keys;
    this.history = [3];
    this.target = 2;
    this.count = 0;
    this.level = 0;
    this.buttons = [];
    this.buttons.push(new Button(0, 0.5, 0, this, -10.5, 0, 7.5, 15, "", "1+i"));
    this.buttons.push(new Button(1, 0, 0, this, 10.5, 0, 7.5, 15, "", "-2i"));
    this.buttons.push(new Button(1, 1, 0, this, -10.5, 21, 7.5, 15, keys[1], "+1"));
    this.buttons.push(new Button(0.25, 0.25, 0.25, this, 0, 21, 7.5, 15, keys[0], "undo"));
    this.buttons.push(new Button(1, 1, 0, this, 10.5, 21, 7.5, 15, keys[2], "*i"));
  }

  Player.prototype.draw = function() {
    var button, j, len, ref;
    if (this.keys === "SAD") {
      if (this.target.toString() === this.top().toString()) {
        fc(0, 1, 0);
      } else {
        fc(0.5);
      }
    } else {
      if (this.target.toString() === this.top().toString()) {
        fc(0, 1, 0);
      } else {
        fc(0.5);
      }
    }
    rect(0, 0, width * this.w / this.M, height * this.h / this.N);
    this.buttons[0].txt = this.top().toString();
    this.buttons[1].txt = this.target.toString();
    ref = this.buttons;
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      button.draw();
    }
    textSize(height / 20);
    fc(0.25);
    text(this.level - this.history.length + 1, -width * 0.17, height * 0.18);
    return this.complexBitmap();
  };

  Player.prototype.complexBitmap = function() {
    var i, j, len, n, ref, x, x1, x2, y, y1, y2;
    n = int(width / 90);
    fc(0);
    rect(0, 0, 20 * n, 20 * n);
    sc(1, 1, 0);
    sw(1);
    ref = range(21);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x1 = -10 * n;
      y = lerp(-10 * n, -9 * n, i);
      x2 = 10 * n;
      line(x1, y, x2, y);
      x = lerp(-10 * n, -9 * n, i);
      y1 = -10 * n;
      y2 = 10 * n;
      line(x, y1, x, y2);
    }
    sw(3);
    line(0, y1, 0, y2);
    line(x1, 0, x2, 0);
    if (this.target.toString() !== this.top().toString()) {
      this.complexPoint(n, 1, 1, 0, this.top().add(new Complex(1, 0)));
      this.complexPoint(n, 1, 1, 0, this.top().mul(new Complex(0, 1)));
    }
    this.complexPoint(n, 1, 0, 0, this.target);
    return this.complexPoint(n, 0, 1, 0, this.top());
  };

  Player.prototype.complexPoint = function(n, r, g, b, c) {
    if (abs(c.x) <= 10 && abs(c.y) <= 10) {
      fc(r, g, b, 0.75);
      sc();
      return circle(n * c.x, -n * c.y, n / 2);
    }
  };

  Player.prototype.process = function(key) {
    if (this.target.toString() === this.top().toString()) {
      return;
    }
    if (key === this.keys[0] && this.history.length > 1) {
      this.history.pop();
    }
    if (key === this.keys[1]) {
      this.save(this.top().add(new Complex(1, 0)));
    }
    if (key === this.keys[2]) {
      return this.save(this.top().mul(new Complex(0, 1)));
    }
  };

  Player.prototype.save = function(value) {
    var d, ms;
    this.count++;
    this.history.push(value);
    if (this.target.toString() === this.top().toString()) {
      d = new Date();
      ms = d.getTime();
      return this.stopp = int(ms);
    }
  };

  Player.prototype.mousePressed = function() {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.mousePressed());
    }
    return results;
  };

  Player.prototype.touchStarted = function(x, y) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.touchStarted(x, y));
    }
    return results;
  };

  Player.prototype.keyPressed = function(key) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.keyPressed(key));
    }
    return results;
  };

  Player.prototype.score = function() {
    return (this.stopp - this.start) / 1000 + this.count * 10;
  };

  Player.prototype.top = function() {
    return this.history[this.history.length - 1];
  };

  Player.prototype.finished = function() {
    return this.top().toString() === this.target.toString();
  };

  Player.prototype.perfect = function(level) {
    return this.finished() && this.count <= level;
  };

  digits = function(x) {
    if (x < 100) {
      return x.toFixed(3);
    }
    if (x < 1000) {
      return x.toFixed(2);
    }
    if (x < 10000) {
      return x.toFixed(1);
    }
    return x.toFixed(0);
  };

  Player.prototype.result = function() {
    var H, dx, i, j, len, n, number, ref, results, x, x0, y;
    n = 20;
    if (this.stopp === 0) {
      return;
    }
    fill(this.color);
    H = height / n;
    textSize(H);
    if (this.keys === "SAD") {
      x0 = -width / 8;
      dx = -width / 8;
    } else {
      x0 = width / 8;
      dx = width / 8;
    }
    text(digits(this.score()), x0, -9.5 * H);
    ref = this.history;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      number = ref[i];
      x = int(i / (n - 1));
      y = int(i % (n - 1));
      results.push(text(number, x0 + x * dx, -8.5 * H + y * H));
    }
    return results;
  };

  return Player;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Complex\www\Player.coffee