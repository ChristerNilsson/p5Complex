// Generated by CoffeeScript 1.11.1
var Player;

Player = (function() {
  var digits;

  function Player(keys, x, y, w, h) {
    this.w = w;
    this.h = h;
    this.M = 120;
    this.N = 60;
    this.keys = keys;
    this.history = [];
    this.target = 2;
    this.count = 0;
    this.level = 0;
    this.buttons = [];
    this.buttons.push(new Button(0, 1, 0, this, 0, -7.5, -24, 6, 12, "", "a"));
    this.buttons.push(new Button(1, 0, 0, this, 0, 7.5, -24, 6, 12, "", "b"));
    this.buttons.push(new Button(1, 1, 1, this, 0.2, 0, -24, 6, 12, keys[0], "1"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, -11, 24, 6, 12, keys[4], "m"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, -3.67, 24, 6, 12, keys[1], "*i"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, 3.67, 24, 6, 12, keys[2], "*2"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, 11, 24, 6, 12, keys[3], "+1"));
  }

  Player.prototype.draw = function() {
    var button, j, len, ref, results;
    if (g.bitmap) {
      this.gridWithOneMove();
    }
    if (this.finished()) {
      fc(0, 1, 0, 0.1);
      rect(0, 0, width * this.w / this.M, height * this.h / this.N);
    }
    this.buttons[2].alpha = this.history.length === 1 ? 0 : 0.2;
    this.buttons[0].txt = this.top().toString();
    this.buttons[1].txt = this.target.toString();
    this.buttons[2].txt = this.level - this.history.length + 1;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.draw());
    }
    return results;
  };

  Player.prototype.grid = function(m, n) {
    var i, j, len, p, ref;
    fc(0);
    rect(0, 0, 20 * n, 20 * n);
    sc(1, 1, 1);
    sw(1);
    strokeCap(SQUARE);
    ref = range(21);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      p = lerp(-10 * n, -9 * n, i);
      line(-m, p, m, p);
      line(p, -m, p, m);
    }
    sw(3);
    line(0, -m, 0, m);
    return line(-m, 0, m, 0);
  };

  Player.prototype.gridWithOneMove = function() {
    var m, n;
    n = int(width / 40);
    m = 10 * n;
    this.grid(m, n);
    if (!this.finished()) {
      this.complexPoint(n, 1, 1, 0, this.top().mul(new Complex(0, 1)));
      this.complexPoint(n, 1, 1, 0, this.top().mul(new Complex(2, 0)));
      this.complexPoint(n, 1, 1, 0, this.top().add(new Complex(1, 0)));
      this.complexPoint(n, 1, 1, 0, this.top().mir());
    }
    this.complexPoint(n, 1, 0, 0, this.target);
    return this.complexPoint(n, 0, 1, 0, this.top());
  };

  Player.prototype.draw_path = function(path, n, thickness, r, g, b) {
    var a, i, j, len, move, radius, results, start, stopp;
    sw(thickness);
    fc();
    sc(r, g, b);
    strokeCap(ROUND);
    results = [];
    for (i = j = 0, len = path.length; j < len; i = ++j) {
      move = path[i];
      if (i === 0) {
        continue;
      }
      a = path[i - 1];
      radius = n * dist(0, 0, a.x, a.y);
      if (radius === n * dist(0, 0, move.x, move.y) && !(move.x === a.y && move.y === a.x)) {
        start = -HALF_PI + atan2(a.x, a.y);
        stopp = -HALF_PI + atan2(move.x, move.y);
        results.push(arc(0, 0, 2 * radius, 2 * radius, stopp, start));
      } else {
        results.push(line(n * a.x, -n * a.y, n * move.x, -n * move.y));
      }
    }
    return results;
  };

  Player.prototype.gridWithAllMoves = function() {
    var j, k, len, len1, m, move, n, ref, ref1;
    n = int(width / 40);
    m = 10 * n;
    this.grid(m, n);
    this.draw_path(this.history, n, 9, 1, 1, 1);
    this.draw_path(g.solution, n, 5, 1, 0, 0);
    ref = this.history;
    for (j = 0, len = ref.length; j < len; j++) {
      move = ref[j];
      this.complexPoint(n, 1, 1, 0, move, n / 2 - 2);
    }
    ref1 = g.solution;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      move = ref1[k];
      this.complexPoint(n, 1, 1, 0, move, n / 4);
    }
    this.complexPoint(n, 1, 0, 0, this.target);
    return this.complexPoint(n, 0, 1, 0, this.history[0]);
  };

  Player.prototype.complexPoint = function(n, r, g, b, c, radius) {
    if (radius == null) {
      radius = n / 2 - (g * 2);
    }
    if (abs(c.x) <= 10 && abs(c.y) <= 10) {
      sc();
      fc(r, g, b, 0.75);
      return circle(n * c.x, -n * c.y, radius);
    }
  };

  Player.prototype.process = function(key) {
    print("pro");
    if (this.finished()) {
      return;
    }
    if (key === this.keys[0] && this.history.length > 1) {
      this.history.pop();
    }
    if (key === this.keys[1]) {
      this.save(this.top().mul(new Complex(0, 1)));
    }
    if (key === this.keys[2]) {
      this.save(this.top().mul(new Complex(2, 0)));
    }
    if (key === this.keys[3]) {
      this.save(this.top().add(new Complex(1, 0)));
    }
    if (key === this.keys[4]) {
      return this.save(this.top().mir());
    }
  };

  Player.prototype.save = function(value) {
    var d, ms;
    this.count++;
    this.history.push(value);
    if (this.finished()) {
      d = new Date();
      ms = d.getTime();
      return this.stopp = int(ms);
    }
  };

  Player.prototype.mousePressed = function() {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.mousePressed());
    }
    return results;
  };

  Player.prototype.touchStarted = function(x, y) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.touchStarted(x, y));
    }
    return results;
  };

  Player.prototype.keyPressed = function(key) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.keyPressed(key));
    }
    return results;
  };

  Player.prototype.score = function() {
    return (this.stopp - this.start) / 1000 + (this.history.length - 1) * 10;
  };

  Player.prototype.top = function() {
    return this.history[this.history.length - 1];
  };

  Player.prototype.finished = function() {
    return this.top().toString() === this.target.toString();
  };

  Player.prototype.perfect = function(level) {
    return this.finished() && this.history.length - 1 <= level;
  };

  digits = function(x) {
    if (x < 100) {
      return x.toFixed(3);
    }
    if (x < 1000) {
      return x.toFixed(2);
    }
    if (x < 10000) {
      return x.toFixed(1);
    }
    return x.toFixed(0);
  };

  Player.prototype.result = function() {
    var H, n, x0;
    n = 20;
    if (this.stopp === 0) {
      return;
    }
    this.gridWithAllMoves();
    H = height / n;
    textSize(H);
    if (_.isEqual(this.keys, [87, 65, 83, 68, 16])) {
      x0 = width / 8;
    } else {
      x0 = -width / 8;
    }
    return text(digits(this.score()), x0, -9.5 * H);
  };

  return Player;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Complex\www\Player.coffee