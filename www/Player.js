// Generated by CoffeeScript 1.11.1
var Player;

Player = (function() {
  var digits;

  function Player(keys, x, y, w, h) {
    this.w = w;
    this.h = h;
    this.M = 120;
    this.N = 60;
    this.keys = keys;
    this.history = [3];
    this.target = 2;
    this.count = 0;
    this.level = 0;
    this.buttons = [];
    this.buttons.push(new Button(0, 0.5, 0, this, 0, -7.5, -24, 6, 12, "", "a"));
    this.buttons.push(new Button(1, 0, 0, this, 0, 7.5, -24, 6, 12, "", "b"));
    this.buttons.push(new Button(0, 0, 0, this, 0.2, 0, -24, 6, 12, keys[0], "1"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, -10.5, 24, 6, 12, keys[1], "*i"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, 0.0, 24, 6, 12, keys[2], "*2"));
    this.buttons.push(new Button(1, 1, 0, this, 0.2, 10.5, 24, 6, 12, keys[3], "+1"));
  }

  Player.prototype.draw = function() {
    var button, j, len, ref, results;
    this.complexBitmap();
    if (this.finished()) {
      fc(0, 1, 0, 0.1);
    } else {
      fc(0.5, 0.5, 0.5, 0.5);
    }
    rect(0, 0, width * this.w / this.M, height * this.h / this.N);
    print(this.history);
    this.buttons[2].alpha = this.history.length === 1 ? 0 : 0.2;
    this.buttons[0].txt = this.top().toString();
    this.buttons[1].txt = this.target.toString();
    this.buttons[2].txt = this.level - this.history.length + 1;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.draw());
    }
    return results;
  };

  Player.prototype.complexBitmap = function() {
    var i, j, len, n, ref, x, x1, x2, y, y1, y2;
    n = int(width / 40);
    fc(0);
    rect(0, 0, 20 * n, 20 * n);
    sc(1, 1, 0);
    sw(1);
    ref = range(21);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x1 = -10 * n;
      y = lerp(-10 * n, -9 * n, i);
      x2 = 10 * n;
      line(x1, y, x2, y);
      x = lerp(-10 * n, -9 * n, i);
      y1 = -10 * n;
      y2 = 10 * n;
      line(x, y1, x, y2);
    }
    sw(3);
    line(0, y1, 0, y2);
    line(x1, 0, x2, 0);
    if (!this.finished()) {
      this.complexPoint(n, 1, 1, 0, this.top().mul(new Complex(0, 1)));
      this.complexPoint(n, 1, 1, 0, this.top().mul(new Complex(2, 0)));
      this.complexPoint(n, 1, 1, 0, this.top().add(new Complex(1, 0)));
    }
    this.complexPoint(n, 1, 0, 0, this.target);
    return this.complexPoint(n, 0, 1, 0, this.top());
  };

  Player.prototype.complexPoint = function(n, r, g, b, c) {
    if (abs(c.x <= 10 && abs(c.y <= 10))) {
      fc(r, g, b, 0.75);
      sc();
      return circle(n * c.x, -n * c.y, n / 2);
    }
  };

  Player.prototype.process = function(key) {
    if (this.finished()) {
      return;
    }
    if (key === this.keys[0] && this.history.length > 1) {
      this.history.pop();
    }
    if (key === this.keys[1]) {
      this.save(this.top().mul(new Complex(0, 1)));
    }
    if (key === this.keys[2]) {
      this.save(this.top().mul(new Complex(2, 0)));
    }
    if (key === this.keys[3]) {
      return this.save(this.top().add(new Complex(1, 0)));
    }
  };

  Player.prototype.save = function(value) {
    var d, ms;
    this.count++;
    this.history.push(value);
    if (this.finished()) {
      d = new Date();
      ms = d.getTime();
      return this.stopp = int(ms);
    }
  };

  Player.prototype.mousePressed = function() {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.mousePressed());
    }
    return results;
  };

  Player.prototype.touchStarted = function(x, y) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.touchStarted(x, y));
    }
    return results;
  };

  Player.prototype.keyPressed = function(key) {
    var button, j, len, ref, results;
    ref = this.buttons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      results.push(button.keyPressed(key));
    }
    return results;
  };

  Player.prototype.score = function() {
    return (this.stopp - this.start) / 1000 + this.count * 10;
  };

  Player.prototype.top = function() {
    return this.history[this.history.length - 1];
  };

  Player.prototype.finished = function() {
    return this.top().toString() === this.target.toString();
  };

  Player.prototype.perfect = function(level) {
    return this.finished() && this.count <= level;
  };

  digits = function(x) {
    if (x < 100) {
      return x.toFixed(3);
    }
    if (x < 1000) {
      return x.toFixed(2);
    }
    if (x < 10000) {
      return x.toFixed(1);
    }
    return x.toFixed(0);
  };

  Player.prototype.result = function() {
    var H, dx, i, j, len, n, number, ref, results, x, x0, y;
    n = 20;
    if (this.stopp === 0) {
      return;
    }
    fill(this.color);
    H = height / n;
    textSize(H);
    if (this.keys === "WASD") {
      x0 = -width / 8;
      dx = -width / 8;
    } else {
      x0 = width / 8;
      dx = width / 8;
    }
    text(digits(this.score()), x0, -9.5 * H);
    ref = this.history;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      number = ref[i];
      x = int(i / (n - 1));
      y = int(i % (n - 1));
      results.push(text(number, x0 + x * dx, -8.5 * H + y * H));
    }
    return results;
  };

  return Player;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Complex\www\Player.coffee